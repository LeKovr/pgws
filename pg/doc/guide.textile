h1. Инструкция по использованию

{{toc}}

h2. Использование API

Список доступных методов API размещается на странице документации (текущая - http://www.tender.pro/api/docs/smd). В будущем это описание будет доступно также и в JSON (в формате "SMD":http://groups.google.com/group/json-rpc/web/simple-method-description-for-json-rpc-example)

h3. Шаблоны TemplateToolkit

В шаблонах доступна функция *api*, которой передается имя метода и хэш аргументов. Результат возвращается в структуре данных, соответствующей описанию метода.

Пример:
<pre>
[% SET ac = api('ws.class_action', 'class_id' => m.class_id, 'id' => m.action_id ) %]
</pre>

См. также:
* [[frontend|Разработка интерфейса]]
* Примеры в каталоге дистрибутива *app/tmpl/page*

h3. JS-приложения

Внешним клиентам и внутреннему коду на javascript по [[Rpc|стандартному протоколу JSON-RPC]] доступен одинаковый функционал.

См. также:
* [[js|Доступ к API из Javascript]]

h3. Внешние приложения

Использование открытого протокола позволяет получить доступ к API не только из Javascript, но и из программ на других языках.

См. также:
* [[client|Реализация доступа извне]]

h2. Автоматическое документирование API

Хранение кода в БД позволяет по информации системных каталогов PostgreSQL сформировать описание доступных через API методов, включая структуры аргументов, результатов и настройки прав доступа.
Эта информация предназначена для использования как при разработке методов API, так и при реализации клиентских интерфейсов.
В настоящий момент информация доступна по адресам:

* "Описание методов":http://www.tender.pro/api/docs/smd - методы API
* "Описание типов":http://www.tender.pro/api/docs/xsd - Типы аргументов и результатов
* "Описание классов":http://www.tender.pro/api/docs/class - Классы, роли и уровни доступа

h2. Журналирование

Система журналирования, реализованная в проекте, позволяет гибкую настройку формирования отладочной информации и журналов работы. Настройка журналирования основана на нескольких параметрах.

h3. Параметры журналирования

h4. Адресат журнала

Информация может быть сохранена в журнальных файлах на сервере или быть передана стороне, вызвавшей метод. Для индивидуальной настройки используются адресаты:

* *syslog* - Журнал сервера (STDERR, error.log сервера apache и т.п)
* *debug* - возвращаемый журнал (доступен Генератору html-интерфейса и JSON-RPC клиентам)

h4. Источник запроса

Подсистема, из которой инициирован запрос к API. Журналирование может быть индивидуально настроено для следующих источников:

* *post* - RPC-запрос 
* *get* - Генератор html-интерфейса
* *tmpl* - Вызовы API из шаблонов
* *default* - значения используются, если настройки для текущего источника не заданы

h4. Стадия выполнения метода API

Процесс выполнения метода проходит несколько этапов, журналирование каждого из них может быть настроено индивидуально. Список этапов и точки начала и завершения каждого из них заданы инструкциями в коде серверной части API (с поддержкой вложенных этапов) и могут меняться в следующих версиях. В текущей версии возможна индивидуальная настройка журналирования для следующих этапов выполнения метода:

* *acl* - проверка прав доступа
* *validate* - валидация аргументов метода
* *call* - непосредственный вызов метода
* *cache* - использование кэша
* *default* - значения используются, если настройки для текущей стадии не заданы

h4. Уровень журналирования

Комбинация значений *Адресат*, *Источник*, *Стадия* определяет этап выполнения, журналирование внутри которого определяется заданным в настройках *уровнем журналирования*.
Отладочная и журнальная информация, формируемая программным кодом, сохраняется в журналах только в том случае, если ее уровень журналирования не превышает уровень, заданный в настройках для текущего этапа выполнения. Реализованы следующие уровни журналирования:

* *1. sys_error* - программная ошибка
* *2. rpc_error* - ошибка протокола JSON_RPC
* *3. app_error* - ошибка уровня приложения
* *4. debug* - журнальная информация
* *5. dump* - дампы структур данных

h3. Примеры настройки

Параметры журналирования для адресата *debug* (frontend.json):
<pre>
"rpc": {
  "default_level": "1",
  "debug": {
    "post":    { "default": 5, "call": 5, "acl": 3, "cache": 3, "validate": 2 },
    "get":     { "default": 5, "call": 4, "acl": 4, "cache": 3, "validate": 3 },
    "tmpl":    { "default": 4, "call": 3, "acl": 3, "cache": 3, "validate": 2 },
  },
},
</pre>

Параметры журналирования для адресата *syslog* (server.json):
<pre>
"rpc": {
  "default_level": "1",
  "syslog": {
    "default": { "default": 3, "call": 3, "acl": 3, "cache": 3, "validate": 2 },
  },
},
</pre>


h3. Адресат журналирования "debug"

Отладочная и журнальная информация, формируемая при обработке запроса для адресата *debug*, сохраняется в массиве элементов следующей структуры:

* *caller* - имя класса и функции, в которых произведено обращение к подсистеме журналирования
* *package* - имя пакета, в котором определена эта функция (может отличаться от класса при наследовании)
* *line* - строка в файле пакета, в которой задано обращение
* *level* - уровень отладки
* *source* - источник
* *stage* - стадия
* *message* - строка сообщения
* *data* - дамп структуры данных

Этот массив очищается по завершении запроса и предназначен для предоставления разработчикам отладочной информации непосредственно на текущей html-странице.
Доступ к содержимому массива журнальных данных может быть осуществлен двумя способами.

В первоначальном дизайне интерфейса для доступа к этой информации служит чекбокс в правом нижнем углу страницы (он открывает div с информацией журнала)
Чекбокс доступен только если в настройках (config.json) задан параметр FE_DEBUG_IFACE = 1.

h3. Доступ к журналу из шаблонов

Настройка журналирования работы Контент-генератора задается в двух источниках - *get* и *tmpl*. Собранная согласно этим настройкам информация, при включенном режиме отладки шаблонов, выводится в подвале страницы посредством подключения в шаблон подвала блока _block/debug.tt2_

h3. Доступ к журналу из AJAX

Настройка журналирования работы AJAX (вызовов методов API из js-кода) задается в источнике *post*. При использовании протокола JSON-RPC (см [[rpc|Протокол передачи данных]] "Запрос. Расширение 3" и "Ответ. Расширение 3") существует возможность передать в запросе параметры журналирования. В этом случае в ответе сервера будет передан массив с данными журнала. Форма настроек журналирования для выполняемого JSON-RPC вызова помещается на страницу в блоке _block/debug.tt2_. Код, включающий эти настройки в вызов API и помещающий результат в подвал страницы, реализован в рамках js-API (_jquery.pwl-full.js_).

Количество отладочной информации, возвращаемой при выполнении JSON-RPC запроса, можно менять через интерфейс (блок debug.tt2 содержит форму с возможными значениями, значения по умолчанию задаются в блоке настроек ws.daemon.log.debug.post)

h2. Работа без доступа к БД

В состав дистрибутива включена утилита управления кэшем (*pgws.sh cache*), которая позволяет 
# выгрузить текущий кэш в текстовые файлы в формате JSON 
# загрузить в кэш содержимое файлов

С ее помощью можно произвести загрузку кэша из файлов в удаленную копию PGWS, после чего сконфигурировать кэш как вечный и работать с локальной копией без непосредственного доступа к БД.
Импорт кэша из текстового формата позволяет также начинать разработку интерфейсов до реализации серверной части.
