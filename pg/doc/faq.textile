h1. F.A.Q. Часто задаваемые вопросы

{{toc}}

h2. Что такое PGWS?

"PGWS":http://rm2.tender.pro/projects/pgws/wiki - это платформа для создания веб-приложений, у которых вся прикладная логика оформлена в виде списка вызываемых функций (методов), а интерфейс может быть как встроен в приложение, так и работать с этими методами извне по протоколу "JSON-RPC":http://www.jsonrpc.org/specification.

h2. Зачем еще один фреймворк?

Причина - обычная. Мы искали фреймворк, который был бы удобен SQL-программистам и позволял легко публиковать API для клиентских приложений.
Ожидалось, что он будет построен на следующих идеях:

# СУБД - главный элемент приложения
## Фреймворк изначально проектируется для реализации сложных приложений, которые используются в среде интернет.
## Ядро сложных интернет-приложений - это СУБД, ее эффективность и быстродействие первичны для проекта и основное внимание должно быть уделено именно эффективности использования СУБД. Задача всего остального кода - быть небольшим, не тормозить и не нуждаться в постоянном тюнинге и доработке.
## Прикладная логика приложения, прежде всего, работает с данными и ближе всего к этим данным расположен хранимый код СУБД.
## Современные СУБД (прежде всего наш выбор - "PostgreSQL":http://www.postgresql.org/) давно позволяют реализовать в хранимом коде большую часть прикладной логики, включая организацию взаимодействия между подсистемами и процессами.
# Документирование - обязательное условие развития приложения
## Сложные приложения не разрабатываются в одиночку. Поэтому наличие актуальной документации существенно. Идеальный вариант - это автоматическое формирование документации по текущему состоянию.
## Для поддержания документации в актуальном состоянии не самый короткий путь - сгенерировать по каким-то настройкам исходный код, потом его доделать и потом парсить результат для получения описания. Короче - сразу положить все существенное в БД и оттуда использовать. В частности, в БД можно разместить описание аргументов некоторой функции и, по этому описанию, как валидировать ее вызов, так и формировать ее документацию.
## Если какие-то данные размещены в БД, меняются редко и нужны часто, это не повод генерить код, это - повод кэшировать запросы к БД.
# Любой интерфейс приложения - один из нескольких
## В современном приложении нельзя ограничиться одним html-интерфейсом. Другие интерфейсы - это не только поддержка мобильных устройств, но и возможность встроить функционал проекта в заранее неизвестное клиентское приложение.
## Интерфейс интернет-приложения решает задачи получения информации(данных) от пользователя и предоставление ему данных. Вопросами обработки данных (включая проверку доступа) должна заниматься прикладная логика, а не интерфейсная часть.

Регулярный поиск подходящего решения к успеху не привел. Поэтому написали свое.

h2. Что означает "PGWS"?

PGWS(PostgreSQL Web Services) - это сочетание двух аббревиатур, PG и WS.

Основная задача проекта - сделать из "SQL":http://ru.wikipedia.org/wiki/SQL -запроса "веб-сервис":http://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%BB%D1%83%D0%B6%D0%B1%D0%B0. Отсюда *W*(eb) *S*(ervices).

SQL-запросы выполняются "СУБД":http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5_%D0%A1%D0%A3%D0%91%D0%94 и проект использует, на наш взгляд, самую подходящую из них - "PostgreSQL":http://www.postgresql.org/. Префикс *PG*(Pg) является стандартным для "PostgreSQL":http://www.postgresql.org/ приложений.

h2. На чем написан PGWS?

Основная часть кода PGWS(PostgreSQL Web Services) написана на SQL и PL/pgSQL (это загружаемый процедурный язык для СУБД "PostgreSQL":http://www.postgresql.org/).
С учетом команд создания и наполнения таблиц, это примерно 2000 строк кода.

Все задачи, которые эффективнее решать вне СУБД, в настоящий момент реализованы на Perl. Это примерно 1500 строк.

Это - код фреймворка, который не содержит прикладной логики. В части же этой логики, на текущий момент, с апреля 2010 по апрель 2012г, написано 8500 строк на SQL (и PL/pgSQL) и 71 строка на Perl.

h2. Какова структура проекта?

С точки зрения пользователя, это:

# вебсайт (или его часть) фиксированной структуры. Адреса страниц задаются при их создании в соответствии с представлениями разработчиков сайта(не фреймворка) о "ЧПУ":http://ru.wikipedia.org/wiki/%D0%A7%D0%9F%D0%A3_%28%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82%29.
# набор методов для обмена данными с сайтом, с помощью которых желаемую часть данных (или функционала) можно встроить в собственный сайт или использовать во внутреннем ПО.

С точки зрения разработчика, это набор каталогов. Каждый каталог - это некоторая подсистема, он может содержать подкаталоги:
* sql - данные и прикладная логика, реализованная в СУБД
* lib - прикладная логика, реализованная иначе (на perl)
* www - публичные файлы, которые передаются клиентам без ограничений и модификации (css, img и т.п.)
* tmpl - html-интерфейс сайта, состоит из:
** page - шаблоны для построения html-страниц. Содержат компоновку конкретных страниц, javascript или его подключение. Для формирования непосредственной html-разметки вызывают отдельные функции (виджеты)
** block - общие блоки шаблонов, используемые несколькими страницами
** layout - все, что касается html-разметки. Шапки, подвалы, виджеты, варианты оформления.

С точки зрения сервера, это два демона:

# fcgid - FastCGI-сервер, который обрабатывает запросы, формирует ответы и обращается к кэшу и СУБД
# tmd - Диспетчер задач, который слушает (LISTEN) события в БД и, при получении задачи, выполняет ее (формирует файлы, отправляет почту, запускает SQL-процедуры рассылок и ежедневного биллинга и т.п.)

h2. Что еще используется, кроме PostgreSQL и Perl?

Кроме самой ОС (Linux или FreeBSD) и стандартного ПО (вроде любого почтового сервера), мы используем сервер "Nginx":http://wiki.nginx.org/Main.

Подробнее про установку и дополнительные perl-библиотеки можно посмотреть в [[install|Инструкции по установке]].

Первоначально были реализованы варианты использования Apache mod_perl или любого CGI сервера. Примеры таких конфигураций есть в дистрибутиве, но они не проходят регулярную проверку работоспособности по причине невостребованности.

h2. Зачем открыли исходный код?

Публикация кода нам была нужна для решения следующих задач:

# Предоставить клиентам, заинтересованным в интеграции с нашим проектом, информацию о том, как интегрироваться и как вообще все устроено.
# Познакомить кандидатов в члены нашей команды с платформой разработки
# Внести посильный вклад в сообщество opensource

В настоящий момент мы не собираемся этим ПО захватывать какие-либо рынки. Если у него найдется своя ниша и у кого-то в нем потребность - там посмотрим.

h2. Кому еще и чем может быть интересен PGWS?

Тем, кому интересно познакомиться с решением, которое, по нашему мнению, предоставляет исключительные удобства как для разработчиков прикладной логики (все данные и их обработка - в БД, одного INSERT достаточно, чтобы функция стала доступна как веб-сервис), так и для разработчиков интерфейсов (единый API, одинаково доступный из шаблонов страниц, а также внутреннего и внешнего javascript кода).

h2. Кто вы такие?

Мы - это компания "Tender.Pro":http://www.tender.pro и, в частности, ее отдел разработки. Про бизнес компании можно "прочитать на основном сайте проекта":http://www.tender.pro/wk/index.php/%D0%A7%D1%82%D0%BE_%D1%82%D0%B0%D0%BA%D0%BE%D0%B5_Tender.Pro%3F.
Территориально мы расположены в СНГ. Есть офисы в Москве и Питере, но основная часть сотрудников находится в различных городах России, Украины и Казахстана.

h2. Какое место PGWS занимает в бизнесе компании?

Компания существует с 2002г и в настоящее время всем ИТ-сопровождением проекта "Tender.Pro":http://www.tender.pro занимается наш отдел разработки. Для нас PGWS(PostgreSQL Web Services) - это инструмент решения части повседневных задач. В целях увеличения этой части мы опубликовали исходники и ищем разработчиков.

h2. Каковы перспективы проекта?

Под PGWS(PostgreSQL Web Services) нам надо реализовать еще много уже известного нам функционала и в очереди стоит пока неизвестный;) Первые полтора года закрытой эксплуатации показали, что у PGWS(PostgreSQL Web Services) есть все шансы иметь продолжительное и интенсивное развитие. Как минимум - в рамках наших задач, как максимум - на благо всего человечества ;)

h2. Что еще почитать про PGWS?

Исходники проекта доступны на github.com - https://github.com/LeKovr/pgws
Документация размещена и постоянно обновляется тут - http://rm2.tender.pro/projects/pgws/wiki

h2. Как можно поучаствовать?

В  настоящий момент у нас открыты вакансии по двум направлениям - SQL (PL/pgSQL) и JavaScript (jQuery). Если работа с одним и(или) другим уже давно является вашим профессиональным выбором и PGWS(PostgreSQL Web Services) не кажется вам "ЗаНаКоНиНеПОЧ(ЗАумное НАгромождение КОда НИкогда НЕ Пойму О Чем)":http://www.google.ru/search?q="заумное+нагромождение+кода+никогда+не+пойму+о+чем"&end ^(с)^, свяжитесь с нами и мы найдем вариант сотрудничества. У нас допустимы очень разные варианты;)

h2. Кому задавать остальные вопросы?

* Лицензионные и юридические вопросы: adm-group@tender.pro
* Вопросы разработки и вакансий: jean@tender.pro
