h1. Протокол передачи данных

{{toc}}

h2. Назначение 

Проект предназначен для предоставления программного интерфейса к системе следующим типам клиентов:

# генератор html-интерфейса системы
# приложения на javascript, загруженные с сайта системы и выполняемые браузером клиента (в т.ч. ExtJS интерфейс к системе)
# программы клиентов, осуществляющие обмен с серверами системы

Обмен данными с клиентами происходит по протоколу JSON-RPC v2.0 over HTTP. В первоначальной реализации генератор интерфейса вызывает методы напрямую, без конвертации в JSON и обратно.

Во всех случаях клиент отправляет на сервер запрос, содержащий имя метода и его аргументы, и, при наличии у пользователя достаточных привилегий, получает результат выполнения метода.

h2. Формат сообщений

Формат сообщений соответствует спецификации http://www.jsonrpc.org/specification с указанными ниже расширениями.
Т.к. запрос передается через http, браузер передает в HTTP-заголовке информацию про cookie и т.п., которая извлекается фронтендом и передается на сервер.

В первоначальной версии реализована поддержка как cookie так и sid, в будущем любой из этих вариантов может быть отключен.


h3. Структура JSON-RPC запроса

Пример:
<pre>
{"jsonrpc":"2.0","id":"3365","method":"app.add","params":{"a":"333","b":"444"}}
</pre>

h4. Стандартная структура

Данные передаются на сервер в теле POST-запроса как JSON-структура, содержащая следующие поля:

* *jsonrpc* - строка идентификации протокола, должна иметь значение "2.0".
* *id* - идентификатор запроса (целое число, обязательный), который будет возвращен в ответе и позволит клиенту отличить один ассинхронный запрос от другого.
* *method* - имя метода
* *params* - объект с полями, имена которых соответствуют именам параметров метода (передача параметров "by-name through an Object")

h4. Расширение 1

* *sid* - идентификатор сессии (для запросов с ограничениями по правам доступа)

h4. Расширение 2

Вызов метода может быть произведен без форматирования в JSON стандартным POST или GET запросом. Если URI запроса имеет вид */_name*.json, то будет вызван метод *name* с аргументами из POST или GET запроса и результат вызова будет возвращен клиенту в JSON-формате, в структуре, аналогичной стандартной, но без конверта (только хэш c полями из *result*).

h4. Расширение 3

Вызов метода по протоколу JSON-RPC может содержать поле

* *debug* - структура параметров журналирования, см. [[Guide#Доступ-к-журналу-из-AJAX]]

h4. Специальный случай 1

Данные, возвращаемые методом, форматируются в структуру (массив, хэш и т.п) согласно параметра *method.rvf_id*. Кодировка форматов - в справочнике *method_rv_format*.
Если имя метода содержит постфикс ":N", вместо значения *method.rvf_id* будет использовано значение *N*.

h4. Специальный случай 2

Если имя метода содержит префикс *check:*, выполнение метода сервером не производится. Сервер возвращает поле *result*, в котором значение *error* (если оно есть) - массив ошибок валидации аргументов, значение *data* = 1 (нет ошибок) или 0.

h4. Специальный случай 3

Если имя метода содержит префикс *acl:*, выполнение метода сервером не производится. Сервер валидирует ключевые аргументы (идентификаторы объекта), производит проверку наличия доступа к вызываемой функции и возвращает поле *result*, в котором значение *data* = 1 (если доступ разрешен) и 0 (иначе). Ошибки валидации возвращаются аналогично обычному вызову метода.

h4. Специальный случай 4

Если имя метода содержит префикс *nc:*, при выполнении метода сервером не производится проверка наличия результата в кэше. Метод выполняется безусловно и результат, если задано в атрибутах метода, сохраняется в кэше (т.е. обновляет его). Это эффективно для данных, имеющих единственный способ получения из БД.

h3. Структура JSON-RPC ответа

Пример:
<pre>
{"jsonrpc":"2.0","id":"3365","result":{"data":"777"},"server":"PGWS v0.10"}
</pre>

h4. Стандартная структура

Данные возвращаются сервером как JSON-структура, содержащая следующие поля:

* *jsonrpc* - строка идентификации протокола, должна иметь значение "2.0".
* *id* - идентификатор переданный в запросе
* *result* - результат выполнения метода (отсутствует при системных ошибках)
* *error* - обязательная при системных ошибках структура описания ошибки

h4. Расширение 1

* *server* - идентификатор номер версии серверной программы. Например: "PGWS v0.10"

h4. Расширение 2

* *success* - признак наличия в ответе поля result.data (*true*, если поле есть, иначе - *false*)

h4. Расширение 3

* *debug* - серверный журнал обработки запроса, см. [[Guide#Доступ-к-журналу-из-AJAX]]

h4. Структура поля result

* *data* - результат успешного выполнения метода пр наличии данных (отсутствует при прикладных ошибках), структура задана в описании метода
* *args* - хэш аргументов после валидации и подстановки значений по умолчанию
* *error* - массив описаний прикладных ошибок, которые возникли при валидации аргументов или выполнении метода

Структура описания прикладной ошибки

* *id* - имя параметра метода (или "_", если ошибка не связана с параметром)
* *code* - внутренний код ошибки
* *message* - описание ошибки
* *arg* [, argN] - аргументы, использованные в описании ошибки (например, "4" при ошибке "Y0202" с сообщением "нет компании с id = 4") 

h4. Структура поля error

* *code* - целочисленный код ошибки 
* *message* - краткое описание ошибки
* *data* - подробное описание ошибки

Кодировка и описания сообщений соответствуют стандарту, дополнительные ошибки имеют коды -320XX 

