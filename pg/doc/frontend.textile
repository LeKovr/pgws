h1. Разработка интерфейса

{{toc}}


h2. Введение

Фронтенд имеет в своем составе функционал, позволяющий строить html-страницы с использованием данных, возвращаемых методами API, с помощью шаблонизатора TemplateToolkit.
В шаблонах может быть использована как служебная информация Фронтенда, так и результаты вызова любого из методов, которые доступны пользователю, отправившему http-запрос GET. Запросы POST не предназначены для обработки в рамках Фронтенда и транслируются на сервер без обработки Фронтендом. Т.о., все данные передаются в систему только по AJAX посредством кода на javascript.  

h2. Алгоритм построения html-страницы.

Фронтенд при получении запроса выполняет следующие действия:
# запрашивает у сервера описание страницы, маска которой соответствует URI запроса.
# запрашивает у сервера валидность сессии пользователя
# запрашивает у сервера наличие у пользователя прав для выполнения указанной в параметрах страницы акции для соответствующего странице объекта
# при успехе предыдущего - передает шаблонизатору имя шаблона страницы и ссылки на служебные данные (иначе - передает имя шаблона страницы ошибки), шаблон страницы производит формирование основного html-контента ответа и устанавливает флаги, необходимые для включения в заголовок ответа ссылок на внешние файлы и, при необходимости, изменяет атрибуты ответа (заголовок страницы, макет, тип контента и т.п)
# передает шаблонизатору имя шаблона макета шапки и ссылки на служебные данные и отправляет клиенту полученный результат, шаблон макет шапки подключает ссылки на внешние файлы.
# отправляет клиенту основной html-контент страницы
# передает шаблонизатору имя шаблона макета подвала и ссылки на служебные данные и отправляет клиенту полученный результат

Для сохранения целостности макета страницы, шаблоны шапки и подвала объединены в одном файле, который вызывается с параметром layout_head = 1 (для шапки) и layout_head = 0 (для подвала)

h2. Структура каталога шаблонов

h3. Шаблоны пакета оформления 

Пример пакета: style01

<pre>
tmpl
├── block
├── config.tt2
└── layout
    ├── default.tt2
    └── widget
</pre>

h3. Шаблоны пакета бизнес-логики

Пример пакета: wiki

<pre>
tmpl
├── block
│   ├── debug.tt2
│   ├── example1.tt2
│   ├── example2.tt2
│   ├── example3.tt2
│   └── login.tt2
└── page
    ├── company
    │   └── info.tt2
    ├── error.tt2
    ├── index.tt2
    ├── system
    │   ├── sitemap.tt2
    │   ├── smd.tt2
    └── test.tt2
</pre>


h2. Структура шаблона

h3. layout

Макет страницы. Шапка и подвал в одном файле с именем имя_макета.tt2

h3. page

Контент страницы. Шаблоны для построения основного содержания страницы

h3. block

Включаемые блоки. Могут использоваться как в макете, так и в контенте страниц.

h3. Подключение внешних файлов

Файлы стилей, js-скрипты и т.п. подключаются в макете страницы. Подключение может производиться по условию, в этом случае в шаблоне страницы устанавливается флаг (например meta.form_style = 1) и в макете страницы только при установленном флаге подключается соответствующий файл

h2. Переменные

Пример служебных переменных доступен на каждой странице (если включен режим отладки темплейтов), если отметить чекбокс в левом нижнем углу страницы.
Фронтенд предоставляет шаблонам следующие данные


* *req* - параметры запроса (read-only)
* *resp* - параметры ответа
* *page* - атрибуты запрошенной страницы
* *get* - аргументы GET-запроса
* *acl* - эффективных прав пользователя на объект и акцию страницы
* *meta* - флаги включения ссылок в заголовок страницы
* *debug* - флаг отладки
* *session* - атрибуты сессии пользователя

h2. Методы

h3. api. Вызов метода API

интерфейс к API. Универсальный способ получить доступ к данным системы при формировании страницы.

Пример:
<pre>
[% SET ac = api('ws.class_action', 'class_id' => m.class_id, 'id' => m.action_id ) %]
</pre>

h3. uri. Определение URI

Т.к. каждая страница имеет уникальный код, нет необходимости зашивать адреса в шаблоны. Вызов этой функции с указанием кода страницы и идентификаторов объекта вернет атрибуты искомой страницы.

Пример:
<pre>
[% u = uri(code => 'main') %]
<a href="[% u.req %][% session.sid_arg %]">[% u.name %]</a>
</pre>

h3. uri_mk. Формирование URI

Т.к. реальный URI может содержать префикс (корневой путь к PWL) и доп. аргументы (например, sid для авторизованного запроса), для формирования ссылки используется функция *uri_mk*, которая имеет аргументы $name, $args, $anchor. 

Пример:
<pre>
[% u = uri(code => 'main') %]
<a href="[% uri_mk(u.req) %]">[% u.name %]</a>

[% SET u_cla = uri(code => 'class') %]
<a href='[% uri_mk(u_cla.req, undef, classes.${m.class_id}.code) %]-action-[% m.action_id %]'>[% m.action_id %]. [% ac.name %]</a>
<a href='[% uri_mk("/_${m.code}", m.args_exam.replace(',\s*','&')) %]'>[% m.code %]([% m.args_exam %])</a>
</pre>

h3. l. Трансляция строки

Вызов предназначен для будущей поддержки мультиязычности. Все строки в локали шаблонов должны включаться в шаблон через этот вызов. В этом случае в будущем при несовпадении языка пользователя с языком, использованным в шаблонах, строка будет заменяться на перевод.

Пример:
<pre>
<a href="[% page.req %]">[% l('Анонимный режим') %]</a>
</pre>

h2. Регистрация страниц в системе 

Страницы организованы иерархически - у каждой страницы есть путь к корневой странице и этот путь единственный.
При необходимости поддержки двух одинаковых по содержанию страниц с разными адресами, регистрируется две страницы и им указывается одинаковый шаблон.

h3. Атрибуты страницы

Для вывода Фронтендом страница должна быть зарегистрирована в таблице *ws.page* с указанием следующих атрибутов:
<pre>
  code         d_code   NOT NULL -- идентификатор страницы
  , up_code    d_code   NOT NULL -- идентификатор страницы верхнего уровня
  , class_id   d_class  NOT NULL -- ID класса, к которому относится страница
  , action_id  d_id32   NOT NULL -- ID акции, к которой относится страница
  , sort       d_sort   NOT NULL -- порядок сортировки в списке страниц одного уровня
  , uri        d_regexp NOT NULL -- мета-маска с типами переменных, которой должен соответствовать URI запроса
  , tmpl       d_path   NOT NULL -- файл шаблона
  , name       text     NOT NULL -- Заголовок страницы в карте сайта
  , uri_re     text     NOT NULL -- regexp URI, вычисляется триггером при insert/update
  , uri_fmt    text     NOT NULL -- строка формата для генерации URI, вычисляется триггером при insert/update
</pre>

Пример адресации страницы:
* /path1/:s/path2/:i/path3/:s/path4 - мета-маска
* /path1/([^/:]+)/path2/(\d+)/path3/([^/:]+)/path4 - regexp URI
* /path1/%s/path2/%i/path3/%s/path4 - строка формата

Переменные, извлекаемые из URI, доступны в шаблонах как массив *page.args*.

Атрибут *up_code* позволяет автоматически для каждой страницы построить путь от нее к корневой странице и сформировать карту сайта