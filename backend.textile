h1. Разработка прикладной логики

{{toc}}

h2. Общие правила

Метод API - это функция, которая получает аргументы и возвращает некоторую структуру данных. Для того, чтобы функция была доступна в качестве метода, она должна быть зарегистрирована.
Регистрация функций производится добавлением строки с ее атрибутами в таблицу *ws.method*.

Для каждого метода может быть задано публичное имя (по которому он вызывается извне) и внутреннее имя (фактическое имя метода, для не-sql методов имеет формат Package::sub).

В PWL каждый метод соответствует некоторой акции над объектом. В атрибутах метода должны быть указаны идентификаторы объекта и акции (см [[acl|Разграничение доступа]]).

В числе атрибутов метода должны быть указаны идентификаторы
# комплексного типа, поля которого соответствуют аргументам метода
# типа, соответствующего результату метода

Для sql-методов эти идентификаторы могут быть опущены, в этом случае типы будут созданы автоматически по данным из описания хранимой функции. В случае указания, идентификаторы должны соответствовать зарегистрированным типам (таблица *ws.dt*, см [[typesystem|Типы данных и правила валидации]])

Поля, входящие в состав типа аргументов, по имени разделяются на пользовательские и системные.
Следующие имена аргументов зарезервированы как системные: *_acl*, *_sid*, *_ip*, *_cook*. Если числе полей типа будет указано такое имя, его значение будет подставлено сервером из соответствующего атрибута клиентской сессии:

* *_acl* - массив кодов эффективных прав пользователя
* *_sid* - идентификатор сессии (сейчас - из GET параметра sid= после проверки валидности)
* *_ip* - заголовок HTTP запроса 'HTTP_X_FORWARDED_FOR' или параметр 'REMOTE_ADDR' (сейчас - или параметр 'HTTP_X_REAL_IP')
* *_cook* - идентификатор сессии из cookie (сейчас - из cookie JAST_SID)

Для sql-методов имена аргументов хранимой функции могут начинаться с префикса *a_* - этот префикс игнорируется при обработке списка атрибутов.

Для функции задаются следующие атрибуты (таблица *ws.method*):

<pre>
  code         d_code   NOT NULL -- внешнее имя метода
  , class_id   d_class  NOT NULL -- ID класса, к которому относится метод
  , action_id  d_id32   NOT NULL -- ID акции, которой соответствует метод
  , cache_id   d_id32   NOT NULL -- ID кэша, в котором размещается результат вызова метода
  , rvf_id     d_id32   NOT NULL -- ID формата результата (для SQL-методов)
  , is_write   bool     NOT NULL DEFAULT FALSE -- метод меняет БД
  , code_real  d_sub    NOT NULL -- имя вызываемого метода (для не-sql - включая package)
  , is_sql     bool     NOT NULL DEFAULT TRUE -- метод реализован как sql function
  , arg_dt_id  d_id32   NULL     -- ID типа, описывающего аргументы
  , rv_dt_id   d_id32   NULL     -- ID типа результата
  , name       text     NOT NULL -- внешнее описание метода
  , args_exam  text     NULL     -- пример вызова функции
  , args       text     NOT NULL -- строка списка аргументов
</pre>

h2. SQL-методы

Отличаются способом обработки результата. Т.к. postgresql-функция может возвращать только скаляр, комплексный тип или их список, результат функции после извлечения может быть сконвертирован в одну из следующих структур (справочник *ws.method_rv_format*):

<pre>
  1 | нет
  2 | скаляр (значение первого столбца первой строки результата)
  3 | хэш (хэш 1й строки результата)
  4 | хэш {[i][0] -> [i][1]} (ключ - первый столбец результата, значение - второй)
  5 | хэш {[i]{id} -> %[i]} (ключ - столбец результата с именем "id", значение - хэш строки)
  6 | массив [i][0] (массив значений первого столбца результата)
  7 | массив хэшей (каждая строка массива - хэш строки результата)
  8 | массив массивов (каждая строка массива - массив строки результата)
</pre>
_Вопрос добавления типа "9. массив 1й строки результата" отложен до следующей версии._

Необходимое значение задается в поле *ws.method.rvf_id* и может быть изменено для конкретного запроса (см. [[rpc|Протокол передачи данных]] "Специальный случай 1")

Для SQL-методов списки атрибутов (как и тип результата и, при совпадении с публичным, внутреннее имя) при регистрации метода не обязательны. При их отсутствии по описанию хранимой функции будет определен список аргументов (поля типа с именем z_имя_функции) и тип результата. При их отсутствии в таблице зарегистрированных типов (*ws.dt*), в нее будут добавлены соответствующие записи. 

Ввиду того, что postgresql-функция, которая возвращает комплексный тип, не может вернуть пустое значение без exception, все такие функции необходимо оформлять как список строк (_RETURNS SETOF_). Это не влияет на обработку результата (функции вызываются как _select * from method()_), но появляется возможность корректно ответить при отсутствии строки (не выполнив ни одного _RETURN NEXT_ или выполнив _RETURN QUERY_). Однако, вариант с _EXCEPTION_ также будет корректно обработан (в случае вызова, например, _RAISE EXCEPTION '%', ws.e_noaccess();_), но повлечет еще и запись в журнале ошибок postgresql.

Кроме того, функция может вернуть код ошибки, который будет дополнен описанием (из таблицы ws.error) и передан в ответе клиенту как ошибка уровня приложения (кроме случая системной ошибки "нет доступа") для метода в целом (Например: _RAISE EXCEPTION '%', ws.error_str(ERR_NOINTERNAL, a_id::text);_) или с указанием связанного аргумента (Например: _RAISE EXCEPTION '%', ws.perror_str(ERR_NOTFOUND, 'id', a_id::text);_)

h2. Perl-методы

Методы размещаются в пакетах, наследующих *PWL::Plugin*. Имя пакета должно начинаться с *PWL::Plugin* и этот префикс при регистрации не указывается.
Пример метода (_PWL::Plugin::System::acl_):

<pre>

use base qw(PWL::Plugin);

sub acl {
  my ($pkg, $self, $enc, $args) = @_;                    # пакет, объект сервера, кодировка, ссылка на аргументы 
  my ($sid, $class_id, $action_id, @ids_all) = (@$args); # аргументы, заданные при регистрации
  # ...
  my $res = {};
  # вернуть список acl или undef
  if ($acl_eff) {
    $res->{'result'} = { 'data' => $acl_eff };
  } else {
    # ошибка доступа
    return $self->rpc_error('ws_no_acc');
  }
  return $res;
}
</pre>

